library(nycflights13)
delay<- subset(flights, flights$dep_delay >= 30, select=year:time_hour)
#histogram of delayed departure time
ggplot(data=delay, aes(delay$dep_delay)) +
geom_histogram(breaks=seq(30, 1500, by =30),
col="blue",
fill="red",
alpha = .2) +
labs(title="Histogram for Departure delay time") +
labs(x="Departure Delay Time in min", y="Count")
#merge flights with weather based on the same time_hour and origin
merged <- merge(delay, weather, by = c("time_hour", "origin"))
merged <- na.omit(merged) # remove rows containing NAs
#relationship between visibility and delay departure time
ggplot(data=merged, aes(x = merged$dep_delay, y = merged$visib)) +
geom_point() +
labs(x = "Delay time in min", y = "visibility at the time of departure",
title = "Scatterplot for delay time and visibility")
#relationship between wind speed and delay departure time
ggplot(data=merged, aes(x = merged$dep_delay, y = merged$wind_speed)) +
geom_point() +
labs(x = "Delay time in min", y = "wind speed at the time of departure",
title = "Scatterplot for delay time and wind speed")
library(ggplot2)
#histogram of delayed departure time
ggplot(data=delay, aes(delay$dep_delay)) +
geom_histogram(breaks=seq(30, 1500, by =30),
col="blue",
fill="red",
alpha = .2) +
labs(title="Histogram for Departure delay time") +
labs(x="Departure Delay Time in min", y="Count")
merged <- merge(delay, weather, by = c("time_hour", "origin"))
merged <- na.omit(merged) # remove rows containing NAs
cor(merged)
cor(merged$dep_delay)
View(merged)
for_cor <- merged
for_cor[1:7] <- NULL
View(for_cor)
for_cor[2:12] <- NULL
View(for_cor)
cor(for_cor)
for_cor <- merged
for_cor[1:7] <- NULL
for_cor[2:16] <- NULL
cor(for_cor)
for_BN <- read.csv("~/Desktop/python_practice/for_BN.csv", row.names=1)
View(for_BN)
for_BN <- read.csv("~/Desktop/python_practice/for_BN.csv")
View(for_BN)
for_BN$id <- NULL
library(bnlearn)
pdag = iamb(for_BN)
dag = set.arc(dag, from = "A", to = "B")
dag = set.arc(dag, from = "A", to = "D")
dag = set.arc(dag, from = "B", to = "D")
dag = set.arc(dag, from = "C", to = "D")
dag = set.arc(pdag, from = "A", to = "B")
dag = set.arc(dag, from = "A", to = "D")
dag = set.arc(dag, from = "B", to = "D")
dag = set.arc(dag, from = "C", to = "D")
pdag = iamb(for_BN)
for_BN$D <- as.factor(for_BN$D)
library(bnlearn)
pdag = iamb(for_BN)
dag = set.arc(pdag, from = "A", to = "B")
dag = set.arc(dag, from = "A", to = "D")
dag = set.arc(dag, from = "B", to = "D")
dag = set.arc(dag, from = "C", to = "D")
dag
fit = bn.fit(dag, for_BN)
fit
fit$D
D <- fit$D
D <- as.data.frame(fit$D)
D
D[1]
D[2]
D[3]
D[4]
d <- as.data.frame(D[4])
View(d)
PD <- read.csv("~/Desktop/python_practice/PD.csv")
View(PD)
PD$D <- as.factor(PD$D)
pdag = iamb(PD)
dag = set.arc(pdag, from = "A", to = "B")
dag = set.arc(dag, from = "A", to = "D")
dag = set.arc(dag, from = "B", to = "D")
fitPD = bn.fit(dag, PD)
DD <- fitPD$D
dd <- as.data.frame(DD[4])
View(dd)
View(d)
View(dd)
write.csv(d, "~/Desktop/TCGA_parameters.csv")
write.csv(dd, "~/Desktop/PD_parameters.csv")
summary(dd$prob.A)
summary(d$prob.A)
summary(PD$A)
summary(for_BN$A)
delay<- flights
delay$dep_delay[delay$dep_delay >= 30] <- T
delay$dep_delay[delay$dep_delay <= 30] <- F
ggplot(data=delay, aes(delay$dep_delay)) +
geom_histogram(breaks=seq(30, 1500, by =30),
col="blue",
fill="red",
alpha = .2) +
labs(title="Histogram for Departure delay time") +
labs(x="Departure Delay Time in min", y="Count")
merged <- merge(delay, weather, by = c("time_hour", "origin"))
merged <- na.omit(merged) # remove rows containing NAs
View(merged)
delay<- flights
delay$dep_delay[delay$dep_delay >= 30] <- TRUE
delay$dep_delay[delay$dep_delay <= 30] <- FALSE
#merge flights with weather based on the same time_hour and origin
merged <- merge(delay, weather, by = c("time_hour", "origin"))
merged <- na.omit(merged) # remove rows containing NAs
View(merged)
View(delay)
delay<- flights
delay$dep_delay[delay$dep_delay >= 30] <- "T"
delay$dep_delay[delay$dep_delay <= 30] <- "F"
View(delay)
delay<- flights
delay$dep_delay[delay$dep_delay >= 30] <- "T"
delay$dep_delay[delay$dep_delay < 30] <- "F"
View(delay)
delay$dep_delay <- as.logical(delay$dep_delay)
View(delay)
merged <- merge(delay, weather, by = c("time_hour", "origin"))
merged <- na.omit(merged) # remove rows containing NAs
View(merged)
ggplot(data=merged, aes(x = merged$dep_delay, y = merged$wind_speed)) +
geom_boxplot() +
labs(x = "Delay status", y = "wind speed at the time of departure",
title = "Boxplot for delay status and wind speed")
ggplot(data=merged, aes(x = merged$dep_delay, y = merged$visib)) +
geom_boxplot() +
labs(x = "Delay status", y = "visibility at the time of departure",
title = "Boxplot for delay status and visibility")
model <- glm(Dep_delay ~ windspeed,family=binomial(link='logit'),data=merged)
model <- glm(dep_delay ~ windspeed,family=binomial(link='logit'),data=merged)
model <- glm(dep_delay ~ wind_speed,family=binomial(link='logit'),data=merged)
summary(model)
hist(delay$dep_delay)
table(delay$dep_delay)
prop.table(table(delay$dep_delay))
ggplot(data=merged, aes(x = merged$dep_delay, y = merged$visib)) +
geom_boxplot() +
labs(x = "Delay status", y = "visibility at the time of departure",
title = "Boxplot for delay status and visibility")
ggplot(data=merged, aes(x = merged$dep_delay, y = merged$visib)) +
geom_boxplot() +
labs(x = "Delay status", y = "visibility at the time of departure",
title = "Boxplot for delay status and visibility")
ggplot(data=merged, aes(x = merged$dep_delay, y = merged$wind_speed)) +
geom_boxplot() +
labs(x = "Delay status", y = "wind speed at the time of departure",
title = "Boxplot for delay status and wind speed")
state <- as.data.frame(state.x77)
summary(state) #look at variables and distribution of the data
names(state)[names(state) == 'Life Exp'] <- 'Life_Exp' #renaming columns
names(state)[names(state) == 'HS Grad'] <- 'HS_Grad'
str(state)
state.1 <- state
state.1$Area <- NULL #subset the state dataset because area has a higher mean than all other variables
df_melt <- melt(state.1,"Murder")
ggplot(df_melt,aes(Murder,value)) + geom_point() + facet_grid(.~variable) #correlation plots of Murder and all other variables
plot(state$Area, state$Murder) #correlation plot of Murder and all other variable cont.d
cor(state) #correlation coefficient
fit <- lm(Income ~ HS_Grad, data = state)
summary(fit)
plot(fit)
ggplot(df_melt,aes(Murder,value)) + geom_point() + facet_grid(.~variable) #correlation plots of Murder and all other variables
state.1 <- state
state.1$Area <- NULL #subset the state dataset because area has a higher mean than all other variables
df_melt <- melt(state.1,"Murder")
ggplot(df_melt,aes(Murder,value)) + geom_point() + facet_grid(.~variable) #correlation plots of Murder and all other variables
plot(state$Area, state$Murder) #correlation plot of Murder and all other variable cont.d
cor(state) #correlation coefficient
library(tidyverse)
library(ggplot2)
library(reshape2)
library(nycflights13)
state.1 <- state
state.1$Area <- NULL #subset the state dataset because area has a higher mean than all other variables
df_melt <- melt(state.1,"Murder")
ggplot(df_melt,aes(Murder,value)) + geom_point() + facet_grid(.~variable)
plot(state$Area, state$Murder) #correlation plot of Murder and all other variable cont.d
cor(state) #correlation coefficient
plot(Illiteracy, HS_Grad, main="Scatterplot for Illiteracy and High School Graduate Rate",
xlab="Illiteracy ", ylab="High School Graduate Rate", pch=19)
attach(state)
plot(Illiteracy, HS_Grad, main="Scatterplot for Illiteracy and High School Graduate Rate",
xlab="Illiteracy ", ylab="High School Graduate Rate", pch=19)
abline(lm(Illiteracy~HS_Grad), col="red") # add regression line
lines(lowess(HS_Grad,Illiteracy), col="blue") # add lowess line
plot(HS_Grad, Illiteracy, main="Scatterplot for Illiteracy and High School Graduate Rate",
xlab="High School Graduate Rate", ylab="Illiteracy ", pch=19)
abline(lm(Illiteracy~HS_Grad), col="red") # add regression line
lines(lowess(HS_Grad,Illiteracy), col="blue") # add lowess line
fit1 <- lm(Illiteracy~HS_Grad)
summary(fit1)
